/// <reference types="vite/client" />
/// <reference lib="webworker" />
import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, cleanupOutdatedCaches } from 'workbox-precaching';
import { registerRoute, NavigationRoute } from 'workbox-routing';
import { NetworkFirst, CacheFirst, StaleWhileRevalidate } from 'workbox-strategies';
import { CacheableResponsePlugin } from 'workbox-cacheable-response';

declare const self: ServiceWorkerGlobalScope;

// Take control of all pages under this SW's scope immediately
clientsClaim();

// Clean up outdated caches
cleanupOutdatedCaches();

// Precache all assets generated by Vite
precacheAndRoute(self.__WB_MANIFEST);

// Cache names for different types of data
const CACHE_NAMES = {
  API: 'khs-api-v1',
  IMAGES: 'khs-images-v1',
  FONTS: 'khs-fonts-v1',
  NAVIGATION: 'khs-navigation-v1',
  OFFLINE_DATA: 'khs-offline-data-v1'
};

// Background sync will be handled manually in the sync event listener

// API caching strategy - Network First for real-time construction data
registerRoute(
  ({ url }) => url.pathname.startsWith('/api/'),
  new NetworkFirst({
    cacheName: CACHE_NAMES.API,
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200, 206]
      }),
      new ExpirationPlugin({
        maxEntries: 200,
        maxAgeSeconds: 5 * 60, // 5 minutes
        purgeOnQuotaError: true
      })
    ],
    networkTimeoutSeconds: 8
  })
);

// Critical construction data - jobs, customers, materials
registerRoute(
  ({ url }) => {
    const pathname = url.pathname;
    return pathname.includes('/api/jobs') || 
           pathname.includes('/api/customers') || 
           pathname.includes('/api/materials');
  },
  new StaleWhileRevalidate({
    cacheName: CACHE_NAMES.OFFLINE_DATA,
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200]
      }),
      new ExpirationPlugin({
        maxEntries: 500,
        maxAgeSeconds: 30 * 60, // 30 minutes
        purgeOnQuotaError: true
      })
    ]
  })
);

// Images - Cache First for performance
registerRoute(
  ({ request }) => request.destination === 'image',
  new CacheFirst({
    cacheName: CACHE_NAMES.IMAGES,
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200]
      }),
      new ExpirationPlugin({
        maxEntries: 100,
        maxAgeSeconds: 30 * 24 * 60 * 60, // 30 days
        purgeOnQuotaError: true
      })
    ]
  })
);

// Fonts - Cache First with long expiration
registerRoute(
  ({ url }) => url.origin === 'https://fonts.googleapis.com' ||
              url.origin === 'https://fonts.gstatic.com',
  new CacheFirst({
    cacheName: CACHE_NAMES.FONTS,
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200]
      }),
      new ExpirationPlugin({
        maxEntries: 30,
        maxAgeSeconds: 365 * 24 * 60 * 60, // 1 year
        purgeOnQuotaError: true
      })
    ]
  })
);

// Navigation routes - Network First with offline fallback
const navigationHandler = new NetworkFirst({
  cacheName: CACHE_NAMES.NAVIGATION,
  plugins: [
    new CacheableResponsePlugin({
      statuses: [0, 200]
    }),
    new ExpirationPlugin({
      maxEntries: 10,
      maxAgeSeconds: 24 * 60 * 60 // 24 hours
    })
  ],
  networkTimeoutSeconds: 3
});

const navigationRoute = new NavigationRoute(navigationHandler, {
  denylist: [/^\/_/, /\/[^/?]+\.[^/]+$/, /^\/api/, /offline\.html$/]
});

registerRoute(navigationRoute);

// Handle background sync for construction data
self.addEventListener('sync', (event: SyncEvent) => {
  if (event.tag === 'construction-data-sync') {
    event.waitUntil(syncConstructionData());
  }
});

// Background sync function for critical construction data
async function syncConstructionData() {
  try {
    // Get pending operations from IndexedDB
    const request = indexedDB.open('khs-crm-offline', 1);
    
    request.onsuccess = async () => {
      const db = request.result;
      const transaction = db.transaction(['syncQueue'], 'readonly');
      const store = transaction.objectStore('syncQueue');
      const operations = await new Promise<any[]>((resolve) => {
        const getRequest = store.getAll();
        getRequest.onsuccess = () => resolve(getRequest.result);
      });

      // Process sync operations
      for (const operation of operations) {
        await processSyncOperation(operation);
      }
    };
  } catch (error) {
    console.error('Background sync failed:', error);
    throw error;
  }
}

// Process individual sync operations
async function processSyncOperation(operation: any) {
  const { entityType, operation: op, entityId, payload } = operation;
  
  try {
    let url = '';
    let method = 'GET';
    let body = null;

    switch (entityType) {
      case 'customer':
        url = op === 'create' ? '/api/customers' : `/api/customers/${entityId}`;
        method = op === 'create' ? 'POST' : op === 'update' ? 'PUT' : 'DELETE';
        body = op !== 'delete' ? JSON.stringify(payload) : null;
        break;
      case 'job':
        url = op === 'create' ? '/api/jobs' : `/api/jobs/${entityId}`;
        method = op === 'create' ? 'POST' : op === 'update' ? 'PUT' : 'DELETE';
        body = op !== 'delete' ? JSON.stringify(payload) : null;
        break;
      case 'material':
        url = op === 'create' ? `/api/jobs/${payload.jobId}/materials` : `/api/materials/${entityId}`;
        method = op === 'create' ? 'POST' : op === 'update' ? 'PUT' : 'DELETE';
        body = op !== 'delete' ? JSON.stringify(payload) : null;
        break;
    }

    const response = await fetch(url, {
      method,
      headers: {
        'Content-Type': 'application/json'
      },
      body
    });

    if (response.ok) {
      // Remove from sync queue on success
      await removeFromSyncQueue(operation.id);
    }
  } catch (error) {
    console.error('Failed to sync operation:', operation, error);
    // Keep in queue for retry
  }
}

// Remove operation from sync queue
async function removeFromSyncQueue(operationId: string) {
  const request = indexedDB.open('khs-crm-offline', 1);
  
  request.onsuccess = () => {
    const db = request.result;
    const transaction = db.transaction(['syncQueue'], 'readwrite');
    const store = transaction.objectStore('syncQueue');
    store.delete(operationId);
  };
}

// Handle push notifications for job updates
self.addEventListener('push', (event) => {
  if (!event.data) return;

  try {
    const data = event.data.json();
    const options: NotificationOptions = {
      body: data.body || 'New update available',
      icon: '/icons/icon-192x192.png',
      badge: '/icons/icon-72x72.png',
      tag: data.tag || 'khs-notification',
      data: data.data,
      requireInteraction: data.urgent || false,
    };

    // Construction-specific notifications
    if (data.type === 'job-update') {
      options.body = `Job ${data.jobTitle}: ${data.message}`;
    } else if (data.type === 'material-needed') {
      options.body = `Materials needed for ${data.jobTitle}`;
    }

    event.waitUntil(
      self.registration.showNotification(data.title || 'KHS CRM Update', options)
    );
  } catch (error) {
    console.error('Push notification error:', error);
  }
});

// Handle notification clicks
self.addEventListener('notificationclick', (event: NotificationEvent) => {
  event.notification.close();

  const { action } = event;
  const data = event.notification.data;
  
  let url = '/';
  
  switch (action) {
    case 'view':
      url = data?.jobId ? `/jobs/${data.jobId}` : '/jobs';
      break;
    case 'view-materials':
      url = data?.jobId ? `/jobs/${data.jobId}/materials` : '/materials';
      break;
    case 'dismiss':
      return; // Just close notification
    default:
      url = data?.url || '/';
  }

  event.waitUntil(
    self.clients.matchAll({ type: 'window', includeUncontrolled: true })
      .then((clients) => {
        // Check if app is already open
        for (const client of clients) {
          if (client.url.includes(url) && 'focus' in client) {
            return client.focus();
          }
        }
        
        // Open new window/tab if app not open
        if (self.clients.openWindow) {
          return self.clients.openWindow(url);
        }
      })
  );
});

// Offline fallback for navigation
self.addEventListener('fetch', (event) => {
  // Skip non-navigation requests
  if (event.request.mode !== 'navigate') {
    return;
  }

  event.respondWith(
    fetch(event.request)
      .catch(async () => {
        // Serve offline page if navigation fails
        const offlineResponse = await caches.match('/offline.html');
        if (offlineResponse) {
          return offlineResponse;
        }
        const indexResponse = await caches.match('/index.html');
        return indexResponse || new Response('Offline', { status: 200 });
      })
  );
});

// Handle app update notifications
self.addEventListener('message', (event) => {
  if (event.data?.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
  
  if (event.data?.type === 'CHECK_UPDATE') {
    // Check for app updates
    event.ports[0]?.postMessage({
      type: 'UPDATE_STATUS',
      hasUpdate: false // This would be determined by checking app version
    });
  }
});

// Periodic background sync for construction data (if supported)
self.addEventListener('periodicsync', (event: any) => {
  if (event.tag === 'construction-data-refresh') {
    event.waitUntil(refreshConstructionData());
  }
});

// Refresh critical construction data in background
async function refreshConstructionData() {
  try {
    // Refresh critical data for field workers
    const criticalEndpoints = [
      '/api/jobs?status=active',
      '/api/customers?active=true',
      '/api/materials?needed=true'
    ];

    await Promise.allSettled(
      criticalEndpoints.map(endpoint => 
        fetch(endpoint).then(response => {
          if (response.ok) {
            return response.json();
          }
        }).catch(() => null)
      )
    );
  } catch (error) {
    console.error('Background data refresh failed:', error);
  }
}

// Handle quota exceeded errors
self.addEventListener('quotaexceedederror', () => {
  // Clear old caches to free up space
  caches.keys().then(cacheNames => {
    cacheNames.forEach(cacheName => {
      if (cacheName.includes('-v') && !Object.values(CACHE_NAMES).includes(cacheName)) {
        caches.delete(cacheName);
      }
    });
  });
});

// Log service worker installation
self.addEventListener('install', (event) => {
  console.log('KHS CRM Service Worker installing...');
  
  // Pre-cache critical resources
  event.waitUntil(
    caches.open(CACHE_NAMES.OFFLINE_DATA)
      .then(cache => {
        return cache.addAll([
          '/',
          '/offline.html',
          '/manifest.json'
        ]).catch(error => {
          console.warn('Failed to pre-cache some resources:', error);
        });
      })
  );
});

// Log service worker activation
self.addEventListener('activate', (event) => {
  console.log('KHS CRM Service Worker activated');
  
  event.waitUntil(
    // Clean up old caches
    caches.keys().then(cacheNames => {
      return Promise.all(
        cacheNames.map(cacheName => {
          // Delete old versions of caches
          if (cacheName.includes('khs-') && !Object.values(CACHE_NAMES).includes(cacheName)) {
            return caches.delete(cacheName);
          }
        })
      );
    })
  );
});